# Dockerfiles for the Docker images are in another Git repo:
# https://github.com/debiki/talkyard
# located at:  docker/(container-name)/Dockerfile
#
# The build script (which runs `docker build` and `push` to create these images) is here:
# https://github.com/debiki/talkyard/blob/master/s/build-and-release.sh

version: '3.1'
services:
  web:
    image: $DOCKER_REPOSITORY/talkyard-web:$VERSION_TAG
    # dockerfile: https://github.com/debiki/talkyard/blob/master/docker/web/Dockerfile
    restart: always
    volumes:
      - ./conf/sites-enabled-manual/:/etc/nginx/sites-enabled-manual/:ro
      - ./data/sites-enabled-auto-gen/:/etc/nginx/sites-enabled-auto-gen/:ro
      - ./data/certbot/:/etc/certbot/:ro
      - ./data/certbot-challenges/.well-known/:/opt/nginx/html/.well-known/:ro
      - ./data/uploads/:/opt/talkyard/uploads/:ro
      # Mount here so standard monitoring tools looking for Nginx logs will work.
      - /var/log/nginx/:/var/log/nginx/
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - app
    #environment:
    #  X_PULL_KEY: '...'
    #  CDN_PULL_KEY: '...'
    # SECURITY COULD drop capabilities, see: http://rhelblog.redhat.com/2016/10/17/secure-your-containers-with-this-one-weird-trick/
    # Ask at Hacker News: which caps can I drop for an Nginx container? A JVM appserver?
    # Asked here about Nginx:
    #   https://stackoverflow.com/questions/43467670/which-capabilities-can-i-drop-in-a-docker-nginx-container
    # For all containers, not just 'web'.
    #cap_drop:
    #  - DAC_OVERRIDE
    #  ... many more?

  app:
    image: $DOCKER_REPOSITORY/talkyard-app:$VERSION_TAG
    # dockerfile: https://github.com/debiki/talkyard/blob/master/docker/app-prod/Dockerfile
    restart: always
    stdin_open: true  # otherwise Play Framework exits
    volumes:
      - ./conf/play-framework.conf:/opt/talkyard/app/conf/app-prod-override.conf:ro  # see [4WDKPU2] in ed-server
      - ./data/uploads/:/opt/talkyard/uploads/
      # So backups can be downloaded via the admin web interface. But read-only,
      # so evil bugs cannot destroy all backups.
      - /opt/talkyard-backups/archives/:/opt/talkyard/backup-archives/:ro
      # Mount here so log monitoring agents like fluentd can access the log.
      - /var/log/talkyard/:/var/log/talkyard/
    links:
      - cache
      - rdb
      - search
    environment:
      POSTGRES_PASSWORD: '$POSTGRES_PASSWORD'

  cache:
    image: $DOCKER_REPOSITORY/talkyard-cache:$VERSION_TAG
    # dockerfile: https://github.com/debiki/talkyard/blob/master/docker/cache/Dockerfile
    restart: always
    volumes:
      - ./data/cache/:/data/
      - /var/log/redis/:/var/log/redis/
    sysctls:
      net.core.somaxconn: 511

  rdb:
    image: $DOCKER_REPOSITORY/talkyard-rdb:$VERSION_TAG
    # dockerfile: https://github.com/debiki/talkyard/blob/master/docker/rdb/Dockerfile
    restart: always
    volumes:
      - ./data/rdb/:/var/lib/postgresql/data/
      # Mount here so standard monitoring tools configured to find Postgres logs here will work.
      # (Inside the container, we don't mount in /var/lib/postgresql/data/pg_log/ because
      # then Postgres would refuse to create a db in data/, because data/ wouldn't be empty.)
      - /var/log/postgresql/:/var/log/postgresql/
    environment:
      POSTGRES_PASSWORD: '$POSTGRES_PASSWORD'
      # Optionally, streaming replication peer:
      # (but you'll need to rename ./postgres-data/recovery.conf.disabled first — and
      # that file isn't created until you start Postgres)
      # PEER_HOST: 'postgres2'
      # PEER_PORT: '5432'
      # PEER_PASSWORD: '...'

  search:
    image: $DOCKER_REPOSITORY/talkyard-search:$VERSION_TAG
    # dockerfile: https://github.com/debiki/talkyard/blob/master/docker/search/Dockerfile
    restart: always
    volumes:
      # COULD_OPTIMIZE Maybe use a Docker volume contanier here instead? What does the docs mean when
      # they say "Always use a volume bound on /usr/share/elasticsearch/data" — is mapping
      # a directory from the OS okay then? (that's using (parts of) a host's device/volume.
      # https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docker.html#docker-cli-run-prod-mode
      - ./data/search/:/usr/share/elasticsearch/data/
      - /var/log/elasticsearch/:/usr/share/elasticsearch/logs/
    environment:
      bootstrap.memory_lock: 'true'
      ES_JAVA_OPTS: '-Xms512m -Xmx512m'
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  certgen:
    image: $DOCKER_REPOSITORY/talkyard-certgen:$VERSION_TAG
    # dockerfile: https://github.com/debiki/talkyard/blob/master/docker/certgen/Dockerfile
    restart: always
    volumes:
      - ./data/sites-enabled/:/etc/nginx/sites-enabled/
      - ./data/certbot/:/etc/certbot/
      - ./data/certbot-challenges/.well-known/:/opt/nginx/html/.well-known/
      - /var/log/certgen/:/var/log/certgen/

# vim: et ts=2 sw=2
